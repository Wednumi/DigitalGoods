@inject CategoryService CategoryService

<div class="d-flex flex-row category-menu">
    @if (CategoryService.Childs is not null)
    {
        <DropDown>
            <Head>
                <button class="btn btn-primary me-1">Pick category</button>
            </Head>
            <Content>
                <input @bind="_filter" @bind:event="oninput"
               placeholder="search" class="form-control" />
                @foreach (var category in _filteredCategoryChilds)
                {
                    <Item @onclick="() => SetCategory(category)">@category.Name</Item>
                }
            </Content>
        </DropDown>
    }
    <div class="delete-category-btn mx-1">
        <Item @onclick="ReturnToLast">
            <i class="bi bi-backspace-fill"></i>
        </Item>
    </div>
</div>
<div class="d-flex flex-row-reverse justify-content-end my-2">
    @if(Value is not null){
        <div class="category-label mx-0 py-2">
            @Value.Name
        </div>
    }
    @foreach (var category in CategoryService.Parents)
    {
        <i class="bi bi-caret-right-fill align-self-center"></i>
        <div class="category-label mx-0 py-2">
            @category.Name
        </div>
    }
</div>

@code {
    private string _filter = "";

    private List<Category> _filteredCategoryChilds
    {
        get
        {
            var filtered = CategoryService.Childs.Where(c => c.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase));
            return filtered.ToList();
        }
    }

    [Parameter]
    public Category? Value { get; set; }

    [Parameter]
    public EventCallback<Category> ValueChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.MoveCurrentTo(Value);
    }

    private async Task SetCategory(Category? category)
    {
        await SetValue(category);
        await CategoryService.MoveCurrentTo(category);
        _filter = "";
    }

    private async Task ReturnToLast()
    {
        var last = await CategoryService.ReturnToLast();
        await SetValue(last);
    }

    private async Task SetValue(Category? value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(Value);
    }
}
