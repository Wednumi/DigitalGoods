@attribute [Route(Path)]

@layout _SearchLayout

@using DigitalGoods.Core.Specifications
@using DigitalGoods.Core.Specifications.Filters
@using DigitalGoods.Core.Services.CategoryServices
@using DigitalGoods.Web.BlazorServer.Pages.OffersManaging.ListComponents
@using DigitalGoods.Web.BlazorServer.Pages.OffersManaging.Editors
@using DigitalGoods.Web.BlazorServer.Pages.Search.OrderPicking
@using DigitalGoods.Web.BlazorServer.Pages.OfferElements
@using DigitalGoods.Web.BlazorServer.Pages.Search.Components

@inject IRepositoryFactory RepositoryFactory
@inject CategoryChildsViewer CategoryChildsViewer
@inject NavigationManager NavigationManager

<EditForm Model="_filter" OnSubmit="Search">
    <div class="d-flex flex-row">
        <div class="side-bar">
            <div class="filter filter-price">
                <div>Price</div>
                <div class="d-inline-flex">
                    <InputNumber class="form-control input-field" @bind-Value="_filter.BottomPrice" />
                    <span class="m-1">-</span>
                    <InputNumber class="form-control input-field" @bind-Value="_filter.TopPrice" />
                </div>
            </div>
            <div class="filter">
                <CategoryPicker CategoryTagsRelation="_categoryTagsRelation" />
            </div>
            <div class="filter">
                @*<TagEditor CategoryTagsRelation="_categoryTagsRelated" ReadOnly=true />*@
            </div>
            <div class="filter">
                <OrderPicker Filter="_filter"/>
            </div>
            <div class="item-btn mt-2">
                <div class="item-accept mb-2">
                    <InputItem type="submit">Apply</InputItem>
                </div>
                <div class="item-warning">
                    <Item @onclick=ResetFilters>Reset</Item>
                </div>
            </div>
        </div>
        <div class="form-container">
            <div class="d-flex mb-2">
                <InputText @bind-Value="_filter.Name" class="form-control" placeholder="Enter name or part of it"/>
            </div>
            <div>
                @if(_offers is null){
                    <LoadingMessage/>
                }
                else{
                    @foreach (var offer in _offers)
                    {
                        <MenuItem href=@OfferLink(offer) class="d-inline-block m-0 p-0">
                            <div id="@offer.Id" class="offer-container">
                                <div class="image-container">
                                    <OfferPreview Offer="offer" />
                                </div>
                                <div class="info">
                                    @offer.Name
                                    <div class="price">
                                        @if(offer.Discount > 0){
                                            <span class="original-price">
                                                @offer.Price
                                            </span>
                                        }
                                        @offer.FinalPrice()$
                                    </div>
                                    <div class="rating d-flex">
                                        @offer.AverageRating <i class="bi bi-star-fill mx-1 d-flex align-self-center"></i>
                                    </div>
                                </div>
                                @if (offer.Discount != 0)
                                {
                                    <div class="discount">
                                        -@offer.Discount%
                                    </div>
                                }
                            </div>
                        </MenuItem>
                    }
                }
            </div>
        </div>
    </div>
</EditForm>


@code {
    private OfferFilter _filter = new OfferFilter();

    private ICollection<Offer>? _offers;

    private IRepository<Offer> _repository = null!;

    private CategoryTagsRelation _categoryTagsRelation = null!;

    public Action<Category?> CategoryChanged { get; set; } = (category) => { };

    public const string Path = @"/";

    protected async override Task OnInitializedAsync()
    {
        _offers = new List<Offer>();
        _repository = RepositoryFactory.CreateRepository<Offer>();
        _categoryTagsRelation = new CategoryTagsRelation(null, new List<Tag>());
        await Search();
    }

    private async Task Search()
    {
        _offers = null;
        await SetCategoryFilter();
        _filter.Tags = _categoryTagsRelation.Tags;
        var spec = new OfferByFilterSpec(_filter);
        _offers = await _repository.ListAsync(spec);
    }

    private async Task SetCategoryFilter()
    {
        if (_categoryTagsRelation.Category is not null)
        {
            _filter.CategoryTree = await CategoryChildsViewer.AllChildsAsync(_categoryTagsRelation.Category);
        }
        else
        {
            _filter.CategoryTree = null;
        }
    }

    private string OfferLink(Offer offer) => $"/offer/{offer.Id.ToString()}";

    private void ResetFilters()
    {
        NavigationManager.NavigateTo(Path, true);
    }
}
