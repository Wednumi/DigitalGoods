@inject TagService TagService

<div class="wrapper">
    <div class="d-flex flex-row-reverse justify-content-end mb-2">
        @foreach (var tag in TagService.Tags)
        {
            <i class="bi bi-caret-right-fill align-self-center"></i>
            <div class="category-label">
                @tag.Name
                <i class="bi bi-x-square-fill btn-delete-tag" @onclick="() => TagService.Remove(tag)"></i>
            </div>
        }
    </div>
    <div class="d-flex flex-row category-menu">
        <DropDown>
            <Head>
                <button class="btn btn-primary me-1">Pick tags</button>
            </Head>
            <Content>
                <div class="d-inline-flex">
                    <input @bind="_filter" @bind:event="oninput"
                           placeholder="search" class="form-control" />
                    <Item @onclick="TogleOverlay">
                        <i class="bi bi-plus-square-fill"></i>
                    </Item>
                </div>
                @if (TagService.PossibleTags is not null)
                {
                    @foreach (var tag in _filteredTags)
                    {
                        <Item @onclick="() => TagService.Add(tag)">@tag.Name</Item>
                    }
                }
            </Content>
        </DropDown>
    </div>
    <div class="overlay @_overlayCss">
        <EditForm Model="_tagModel" OnValidSubmit="Create">
            <DataAnnotationsValidator />
            <div class="overlay-info">
                <div class="me-1">Category</div>
                <input class="form-control" type="text" placeholder="@Category?.Name" readonly />
            </div>
            <div class="overlay-info">
                <div class="me-2">Enter new tag</div>
                <InputText @bind-Value="_tagModel.Name" class="form-control" placeholder="Tag name" />
            </div>
            <div class="submit-buttons">
                <div class="accept">
                    <InputItem type="submit" value="Add"></InputItem>
                </div>
                <div class="close">
                    <Item @onclick="TogleOverlay">Close</Item>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string _filter = "";

    private string _overlayCss = "invisible";

    private TagModel _tagModel = null!;

    private List<Tag> _filteredTags
    {
        get
        {
            var filtered = TagService.PossibleTags
                .Where(t => t.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase));
            return filtered.ToList();
        }
    }

    [Parameter]
    public Category? Category { get; set; }

    [Parameter]
    public ICollection<Tag> Tags { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _tagModel = new TagModel(Category);
        await TagService.Initialize(Tags, Category);
    }

    private void TogleOverlay()
    {
        _overlayCss = _overlayCss == ""
            ? "invisible"
            : "";
    }

    private void Create()
    {
        var tag = ModelMapper.Map<TagModel, Tag>(_tagModel);
        TagService.Add(tag);
        TogleOverlay();
    }
}
