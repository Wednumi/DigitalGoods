@page "/offers/editor/{InputOfferId}"
@page "/offers/editor"

@using System.ComponentModel.DataAnnotations
@using  DigitalGoods.Web.BlazorServer.Pages.Offer.Managers

@inherits UserIdentificationComponent

@inject OfferService OfferService
@inject IFileManager FileManager
@inject IRollBackContainer RollBackContainer

@layout _OffersLayout

@if(_offerModel is null){
    <LoadingMessage/>
}
else
{
    <div class="flex-fill">
        <EditForm Model="_offerModel" OnValidSubmit="TrySaveAsync">
            <DataAnnotationsValidator />
            <div class="form-item">
                <label>Product name</label>
                <InputText @bind-Value=_offerModel.Name class="form-control" placeholder="Enter name"></InputText>
                <div class="valid-message">
                    <ValidationMessage For="@(() => _offerModel.Name)" />
                </div>
            </div>
            <div class="form-item">
                <label>Medias</label>
                <MediaManager Offer="_offer" />
            </div>
            <div class="d-flex flex-row justify-content-between">
                <div class="form-item flex-fill pe-2">
                    <label>Price $</label>
                    <InputNumber @bind-Value=_offerModel.Price class="form-control" placeholder="Enter Price"></InputNumber>
                    <div class="valid-message">
                        <ValidationMessage For="@(() => _offerModel.Price)" />
                    </div>
                </div>
                <div class="form-item flex-fill ps-2">
                    <label>Discount %</label>
                    <InputNumber @bind-Value=_offerModel.Discount class="form-control"></InputNumber>
                    <div class="valid-message">
                        <ValidationMessage For="@(() => _offerModel.Discount)" />
                    </div>
                </div>
                <div class="form-item flex-fill ps-2">
                    <label>Amount</label>
                    <InputNumber @bind-Value=_offerModel.Amount class="form-control"></InputNumber>
                    <div class="valid-message">
                        <ValidationMessage For="@(() => _offerModel.Amount)" />
                    </div>
                </div>
            </div>
            <div class="form-item">
                <label>Discription</label>
                <InputTextArea @bind-Value=_offerModel.Discription class="form-control"></InputTextArea>
            </div>
            <div class="form-item">
                <label>Category</label>
                <CategoryManager Offer="_offer" />
            </div>
            <div class="form-item">
                <label>Tags</label>
                <TagManager Tags="_offer.Tags" Category="_offer.Category"></TagManager>
            </div>
            <div class="form-item">
                <label>Receive method</label>
                <InputSelect class="form-select" @bind-Value="_offerModel.ReceiveMethod">
                    @foreach (var method in Enum.GetValues(typeof(ReceiveMethod)))
                    {
                        <option value="@method">@method</option>
                    }
                </InputSelect>
            </div>
            <div class="form-item submit-buttons">
                @if(_results.ContainsKey("save")){
                    <div class="align-self-center">@_results["save"]</div>
                }
                <div class="accept">
                    <InputItem href="offers/list" type="submit" value="Accept"></InputItem>
                </div>
                <div @onclick="CancelAsync" class="cancel">
                    <MenuItem href="offers/list">Cancel</MenuItem>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {
    private Offer _offer = null!;

    private OfferModel? _offerModel;

    private Dictionary<string, string> _results = new Dictionary<string, string>();

    [Parameter]
    public string? InputOfferId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitializeOfferAsync();
        _offerModel = ConfiguredMapper.Map<Offer, OfferModel>(_offer);
    }

    private async Task InitializeOfferAsync()
    {
        var offerId = GetParsedOfferId();
        await OfferService.InitializeAsync(CurrentUser, offerId);
        _offer = OfferService.Offer;
    }

    private int? GetParsedOfferId()
    {
        if (int.TryParse(InputOfferId, out int offerId))
        {
            return offerId;
        }
        return null;
    }

    private async Task TrySaveAsync()
    {
        ConfiguredMapper.Map<OfferModel, Offer>(_offerModel!, _offer);
        var result = await OfferService.SaveAsync();
        SetSaveResult(result);
    }

    private void SetSaveResult(ActionResult actionResult)
    {
        var saveResult = actionResult.Success
            ? "Successfully saved"
            : "Saving failed";
        _results["save"] = saveResult;
    }

    private async Task CancelAsync(){
        await RollBackContainer.RollBack();
    }
}
