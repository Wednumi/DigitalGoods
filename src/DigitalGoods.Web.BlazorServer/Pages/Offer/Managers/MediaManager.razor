@inject MediaService MediaService
@inject IFileManager FileManager

@if(MediaService.Medias is not null){
    <InputFile OnChange="@AddFilesAsync" class="form-control mb-1" multiple />
    <i class="bi bi-circle-fill text-primary"></i><span class="ms-1 me-3">Preview media</span>
    <i class="bi bi-circle"></i><span class="ms-1">Descriptive media</span>
    <div>
        @foreach (var media in MediaService.Medias)
        {
            <div class="media-container">
                <img class="offer-image" src="@FileManager.GetFullPath(media)">
                <div class="buttons">
                    @if(media.IsPreview){
                        <i @onclick="() => media.IsPreview = false" class="bi bi-circle-fill text-primary"></i>
                    }
                    else{
                        <i @onclick="() => MediaService.SetPreview(media)" class="bi bi-circle"></i>
                    }
                    <i @onclick="() => DeleteMediaAsync(media)" class="bi bi-dash-circle-fill"></i>
                </div>
            </div>
        }
    </div>
}
else{
    <LoadingMessage/>
}


@code {
    [Parameter]
    public Offer Offer { get; set; } = null!;

    protected override void OnInitialized()
    {
        MediaService.Initialize(Offer.Medias);
    }

    private async Task AddFilesAsync(InputFileChangeEventArgs e)
    {
        int maxAllowedFiles = 10;
        int maxSize = 1024 * 1000;

        var results = new List<ActionResult>();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var saveAction = async (FileStream fileStream)
                => await file.OpenReadStream(maxSize).CopyToAsync(fileStream);

            var media = new Media(file.Name, file.ContentType, file.Size, Offer);

            var result = await MediaService.SaveAsync(media, saveAction);
            results.Add(result);
        }
    }

    private async Task DeleteMediaAsync(Media media)
    {
        await MediaService.DeleteAsync(media);
    }
}
